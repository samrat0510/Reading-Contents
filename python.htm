<!DOCTYPE html>
<html>
    <head>
        <title>let's code | Tutorial | Python</title>
        <link rel="icon" href="images/logo1.png">
        <link rel="stylesheet" href="css/common.css">
        <link rel="stylesheet" href="css/fonts.css">
        <link rel="stylesheet" href="css/scroll.css">
        <script src="javascript.js"></script>
        <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
        <link rel = "stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    </head>
    <body background="grey">
        <div class="main-text">
            <div class="bar">
                <div class="context"><br><br>
                    <h3><a href="#NOTES" style="color: darkorange;">NOTES</a></h3>
                    <a href="c-tutorial.htm" target="_"><p>C</p></a>
                    <a href="c++ - tutorial.htm" target="_"><p>C++</p></a>
                    <a href="python.htm"  target="_" style="color: green;" onclick="fun1()"><p>Python</p></a>
                    <a href="java.htm"  target="_"><p>Java</p></a>
                    <a href="nopage.htm"  target="_"><p>HTML</p></a>
                    <a href="nopage.htm"  target="_"><p>CSS</p></a>
                    <a href="nopage.htm"  target="_"><p>JavaScript</p></a>
                    <a href="nopage.htm"  target="_"><p>Jquerry</p></a>
                </div>
            </div>
            <div class="nav">
                <div class="nav-img">
                    <img src="images/logo.png" width="180px">
                    <div class="nav-link">
                        <a href="index.htm">Home</a>
                        <a href="#">Contact Us</a>
                        <a href="courses.htm">Other Courses</a>
                    </div>
                </div>
            </div>
            <div class="text-field">
                <div class="box">
                    <h1 style="font-family: Baloo-Regular;">Python Tutorial</h1>
                    <p>Python is a general-purpose interpreted, interactive, object-oriented, and high-level programming language.<br>
                       It was created by Guido van Rossum during 1985- 1990. Like Perl, Python source code is also available under<br>
                       the GNU General Public License (GPL). This tutorial gives enough understanding on Python programming language.
                    </p>
                    <h1 style="font-family: Baloo-Regular;">Applications Of Python</h1>
                    <p>
                        Python is one of the most widely used language over the web. I'm going to list few of them here:
                    </p>
                    <br>
                    <br>
                        <li>Easy-to-learn</li><br>
                        <li>Easy-to-read</li><br>
                        <li>Easy-to-maintain</li><br>
                        <li>A broad standard library</li><br>
                        <li>Interactive Mode</li><br>
                        <li>Portable</li><br>
                        <li>Extendable</li><br>
                        <li>DataBases</li><br>
                        <li>GUI Programming</li><br>
                        <li>Scalable</li>
                </div><br><br>
                <div class="box">
                    <h1 style="font-family: Baloo-Regular; color: royalblue;">Linear Search</h1>
                    <p>
                        A linear search, also known as a sequential search, is a method of finding an element within a list.<br> 
                        It checks each element of the list sequentially until a match is found or the whole list has been searched.
                    </p>
                    <p>
                        <li>A simple approach to implement a linear search is</li><br>
                        <li>Begin with the leftmost element of arr[] and one by one compare x with each element.</li><br>
                        <li>If x matches with an element then return the index.</li><br>
                        <li>If x does not match with any of the elements then return -1.</li>
                    </p>
                    <br><br>
                    <h1 style="font-family: Baloo-Regular;">Code Snipet</h1>
                    <div class="code">
                        <pre>
def search(arr, n, x):
 
for i in range(0, n):
    if (arr[i] == x):
        return i
return -1
                         
arr = [2, 3, 4, 10, 40]
x = 10
n = len(arr)
                         
result = search(arr, n, x)
if(result == -1):
    print("Element is not present in array")
else:
     print("Element is present at index", result)
                        </pre>
                    </div>
                </div>
                <hr>
                <div class="box">
                    <h1 style="font-family: Baloo-Regular; color: royalblue;">Binary Search</h1>
                    <p>
                        Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array.<br> 
                        If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half.<br> 
                        Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.
                    </p>
                    <p>
                        <li>Compare x with the middle element.</li><br>
                        <li>If x matches with middle element, we return the mid index.</li><br>
                        <li>Else If x is greater than the mid element, then x can only<br> 
                            lie in right half subarray after the mid element. So we recur for right half.
                        </li><br>
                        <li>Else (x is smaller) recur for the left half.</li>
                    </p>
                    <br><br>
                    <h1 style="font-family: Baloo-Regular;">Code Snipet</h1>
                    <div class="code">
                        <pre><br>
def binarySearch (arr, l, r, x): 
  
if r >= l: 
    mid = l + (r - l) // 2
                          
    if arr[mid] == x: 
        return mid 
    elif arr[mid] > x: 
        return binarySearch(arr, l, mid-1, x) 
                          
    else: 
        return binarySearch(arr, mid + 1, r, x) 
                          
else: 
    return -1
                          
arr = [ 2, 3, 4, 10, 40 ] 
x = 10
                          
result = binarySearch(arr, 0, len(arr)-1, x) 
                          
if result != -1: 
    print ("Element is present at index % d" % result)
else: 
    print ("Element is not present in array")
                        </pre>
                    </div>
                </div>
                <div class="box">
                    <h1 style="font-family: Baloo-Regular; color: royalblue;">Quick Sort</h1>
                    <p>
                        QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot.<br>
                        There are many different versions of quickSort that pick pivot in different ways.
                    </p>
                    <p>
                        <li>Always pick first element as pivot.</li><br>
                        <li>Always pick last element as pivot.</li><br>
                        <li>Pick a random element as pivot.</li><br>
                        <li>Pick median as pivot.</li>
                    </p>
                    <br><br>
                    <h1 style="font-family: Baloo-Regular;">Code Snipet</h1>
                    <div class="code">
                        <pre>
def partition(arr, low, high):
    i = (low-1)
    pivot = arr[high]
                         
    for j in range(low, high):                     
        if arr[j] <= pivot:
            i = i+1
            arr[i], arr[j] = arr[j], arr[i]
                         
    arr[i+1], arr[high] = arr[high], arr[i+1]
    return (i+1) 
                         
def quickSort(arr, low, high):
    if len(arr) == 1:
        return arr
    if low < high:
        pi = partition(arr, low, high)
                         
        quickSort(arr, low, pi-1)
        quickSort(arr, pi+1, high)               
                
arr = [10, 7, 8, 9, 1, 5]
n = len(arr)
quickSort(arr, 0, n-1)
print("Sorted array is:")
for i in range(n):
    print("%d" % arr[i]),
                        </pre>
                    </div>
                </div>
                <div class="box">
                    <h1 style="font-family: Baloo-Regular; color: royalblue;">Merge Sort</h1>
                    <p>
                        Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves,<br> 
                        and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process<br> 
                        that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one. See the following C implementation for details
                    </p>
                    <br><br>
                    <h1 style="font-family: Baloo-Regular;">Code Snipet</h1>
                    <div class="code">
                        <pre>
def merge(arr, l, m, r): 
    n1 = m - l + 1
    n2 = r- m 
                          
    L = [0] * (n1) 
    R = [0] * (n2) 
                          
    for i in range(0 , n1): 
        L[i] = arr[l + i] 
                          
    for j in range(0 , n2): 
        R[j] = arr[m + 1 + j] 
                          
    i = 0
    j = 0
    k = l
                          
    while i < n1 and j < n2 : 
        if L[i] <= R[j]: 
            arr[k] = L[i] 
            i += 1
        else: 
            arr[k] = R[j] 
            j += 1
        k += 1
                          
    while i < n1: 
        arr[k] = L[i] 
        i += 1
        k += 1
                          
    while j < n2: 
        arr[k] = R[j] 
        j += 1
        k += 1
                          
def mergeSort(arr,l,r): 
    if l < r: 
                          
        m = (l+(r-1))//2                  
        mergeSort(arr, l, m) 
        mergeSort(arr, m+1, r) 
        merge(arr, l, m, r) 
                          
arr = [12, 11, 13, 5, 6, 7] 
n = len(arr) 
print ("Given array is") 
for i in range(n): 
    print ("%d" %arr[i]), 
                          
mergeSort(arr,0,n-1) 
print ("\n\nSorted array is") 
for i in range(n): 
    print ("%d" %arr[i]), 
                        </pre>
                    </div>
                </div>
            </div>
            <br><br><br>
            <div class="footer" style="text-align: center;">
                <i>&copy; <a style="color: red; font-weight: bolder;">let's code 2020</a></i>
            </div>
            <br><br><br>
        </div>
    </body>
